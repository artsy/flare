{
  "name": "parse5",
  "description": "Fast full-featured HTML parser for Node. Based on WHATWG HTML5 specification.",
  "version": "1.0.1",
  "author": {
    "name": "Ivan Nikulin",
    "url": "ifaaan@gmail.com, https://github.com/inikulin"
  },
  "keywords": [
    "html",
    "parser",
    "html5",
    "WHATWG",
    "specification",
    "fast",
    "html parser",
    "html5 parser",
    "htmlparser",
    "parse5",
    "serializer",
    "html serializer",
    "htmlserializer"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/inikulin/parse5.git"
  },
  "main": "./index.js",
  "devDependencies": {
    "nodeunit": "0.8.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/inikulin/parse5/master/LICENSE"
    }
  ],
  "readme": "![logo](https://raw.github.com/inikulin/parse5/master/logo.png)  \r\n\r\nFast full-featured HTML parsing/serialization toolset for Node. Based on WHATWG HTML5 specification.  \r\nTo build [TestCafé](http://testcafe.devexpress.com/) we needed fast and ready for production HTML parser, which will parse HTML as a modern browser's parser.\r\nExisting solutions were either too slow or their output was too inaccurate. So, this is how parse5 was born.\r\n\r\n##Install\r\n```\r\n$ npm install parse5\r\n```\r\n\r\n\r\n##Simple usage\r\n```js\r\nvar Parser = require('parse5').Parser;\r\n\r\n//Instantiate parser\r\nvar parser = new Parser();\r\n\r\n//Then feed it with an HTML document\r\nvar document = parser.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>')\r\n\r\n//Now let's parse HTML-snippet\r\nvar fragment = parser.parseFragment('<title>Parse5 is &#102;&#117;&#99;&#107;ing awesome!</title><h1>42</h1>');\r\n\r\n```\r\n\r\n##Is it fast?\r\nCheck out [this benchmark](https://github.com/inikulin/node-html-parser-bench).\r\n\r\n```\r\nStarting benchmark. Fasten your seatbelts...\r\nhtml5 (https://github.com/aredridel/html5) x 0.18 ops/sec ±5.92% (5 runs sampled)\r\nhtmlparser (https://github.com/tautologistics/node-htmlparser/) x 3.83 ops/sec ±42.43% (14 runs sampled)\r\nhtmlparser2 (https://github.com/fb55/htmlparser2) x 4.05 ops/sec ±39.27% (15 runs sampled)\r\nparse5 (https://github.com/inikulin/parse5) x 3.04 ops/sec ±51.81% (13 runs sampled)\r\nFastest is htmlparser2 (https://github.com/fb55/htmlparser2),parse5 (https://github.com/inikulin/parse5)\r\n```\r\n\r\nSo, parse5 is as fast as simple specification incompatible parsers and ~15-times(!) faster than the current specification compatible parser available for the node.\r\n\r\n\r\n##API reference\r\n\r\n###Enum: TreeAdapters\r\nProvides built-in tree adapters which can be passed as an optional argument to the `Parser` and `TreeSerializer` constructors.   \r\n\r\n####&bull; TreeAdapters.default \r\nDefault tree format for parse5.\r\n\r\n\r\n####&bull; TreeAdapters.htmlparser2\r\nQuite popular [htmlparser2](https://github.com/fb55/htmlparser2) tree format (e.g. used in [cheerio](https://github.com/MatthewMueller/cheerio) and [jsdom](https://github.com/tmpvar/jsdom)).  \r\n\r\n---------------------------------------\r\n    \r\n    \r\n###Class: Parser\r\nProvides HTML parsing functionality.\r\n\r\n####&bull; Parser.ctor([treeAdapter])\r\nCreates new reusable instance of the `Parser`. Optional `treeAdapter` argument specifies resulting tree format. If `treeAdapter` argument is not specified, `default` tree adapter will be used.\r\n\r\n*Example:*\r\n```js\r\nvar parse5 = require('parse5');\r\n\r\n//Instantiate new parser with default tree adapter\r\nvar parser1 = new parse5.Parser();\r\n\r\n//Instantiate new parser with htmlparser2 tree adapter\r\nvar parser2 = new parse5.Parser(parse5.TreeAdapters.htmlparser2);\r\n```\r\n\r\n\r\n\r\n####&bull; Parser.parse(html)\r\nParses specified `html` string. Returns `document` node.\r\n\r\n*Example:*\r\n```js\r\nvar document = parser.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\r\n```\r\n\r\n\r\n####&bull; Parser.parseFragment(htmlFragment, [contextElement])\r\nParses given `htmlFragment`. Returns `documentFragment` node. Optional `contextElement` argument specifies resulting tree format. If `contextElement` argument is not specified, `<div>` element will be used.\r\n\r\n*Example:*\r\n```js\r\nvar documentFragment = parser.parseFragment('<table></table>');\r\n\r\n//Parse html fragment in context of the parsed <table> element\r\nvar trFragment = parser.parseFragment('<tr><td>Shake it, baby</td></tr>', documentFragment.childNodes[0]);\r\n```\r\n\r\n---------------------------------------\r\n\r\n###Class: TreeSerializer\r\nProvides tree-to-HTML serialization functionality.\r\n\r\n####&bull; TreeSerializer.ctor([treeAdapter])\r\nCreates new reusable instance of the `TreeSerializer`. Optional `treeAdapter` argument specifies input tree format. If `treeAdapter` argument is not specified, `default` tree adapter will be used.\r\n\r\n*Example:*\r\n```js\r\nvar parse5 = require('parse5');\r\n\r\n//Instantiate new serializer with default tree adapter\r\nvar serializer1 = new parse5.TreeSerializer();\r\n\r\n//Instantiate new serializer with htmlparser2 tree adapter\r\nvar serializer2 = new parse5.TreeSerializer(parse5.TreeAdapters.htmlparser2);\r\n```\r\n\r\n\r\n####&bull; TreeSerializer.serialize(node)\r\nSerializes the given `node`. Returns HTML string.\r\n\r\n*Example:*\r\n```js\r\nvar document = parser.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\r\n\r\n//Serialize document\r\nvar html = serializer.serialize(document);\r\n\r\n//Serialize <body> element content\r\nvar bodyInnerHtml = serializer.serialize(document.childNodes[0].childNodes[1]);\r\n```\r\n\r\n---------------------------------------\r\n\r\n\r\n##Testing\r\nTest data is adopted from [html5lib project](https://github.com/html5lib). Parser is covered by more than 8000 test cases.\r\nTo run tests:\r\n```\r\n$ node test/run_tests.js\r\n```\r\n\r\n\r\n##Custom tree adapter\r\nYou can create a custom tree adapter so parse5 can work with your own DOM-tree implementation.\r\nJust pass your adapter implementation to the parser's constructor as an argument:\r\n\r\n```js\r\nvar Parser = require('parse5').Parser;\r\n\r\nvar myTreeAdapter = {\r\n   //Adapter methods...\r\n};\r\n\r\n//Instantiate parser\r\nvar parser = new Parser(myTreeAdapter);\r\n```\r\n\r\nSample implementation can be found [here](https://github.com/inikulin/parse5/blob/master/lib/tree_adapters/default.js).\r\nThe custom tree adapter should implement all methods exposed via `exports` in the sample implementation.\r\n\r\n##Questions or suggestions?\r\nIf you have any questions, please feel free to create an issue [here on github](https://github.com/inikulin/parse5/issues).\r\n\r\n\r\n##Author\r\n[Ivan Nikulin](https://github.com/inikulin) (ifaaan@gmail.com)\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/inikulin/parse5/issues"
  },
  "homepage": "https://github.com/inikulin/parse5",
  "_id": "parse5@1.0.1",
  "_from": "parse5@~1.0.1"
}
