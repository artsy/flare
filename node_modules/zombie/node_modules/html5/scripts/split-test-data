#!/usr/bin/env node

"use strict";

var HTML5 = require('../lib/html5'),
	events = require('events'),
	async = require('async'),
	fs = require('fs');

function readTestData(filename) { 
	var lines = fs.readFileSync(filename, 'utf-8').split(/\n/)

	var state;
	var output = []
	var current = {}
	var section;


	function readHeader(line) {
		if(line[0] != '#') throw ("Got " + line[0] + " but expected #");
		section = line.slice(1);
		if(section == 'document') {
			current[section] = '';
			state = readDocument;
		} else if(section == 'errors') {
			current[section] = [];
			state = readArray;
		} else {
			current[section] = '';
			state = readString;
		}
	}

	function readArray(line) {
		if(!current[section]) {
			current[section] = [];
		}
		current[section].push(line);
	}

	function readString(line) {
		current[section] += line + "\n";
	}

	function readDocument(line) {
		if(line[0] == '|') line = line.slice(2);
		current[section] += line + "\n";
	}

	state = readHeader;
	for(var l in lines) {
		if(lines[l][0] == '#') {
			state = readHeader;
		} else if(lines[l] == '' && section !== 'data') {
			output.push(current);
			current = {};
			continue;
		}
		state(lines[l]);
	}

	if(Object.keys(current).length > 0) output.push(current);

	return output;
}
var base = __dirname + '/../data/tree-construction-source/'
var testList = fs.readdirSync(base);

function writeTestData(testData, number, testName, cb) {
	var testDir = __dirname + '/../data/tree-construction/' + testName + '-' + number;
	fs.mkdir(testDir, function(err) {
		if (err && err.code !== 'EEXIST') return cb(err);

		try {
			var i = fs.createWriteStream(testDir + '/input.html');
			if (testData.data == "\n") {
				i.end("\n\n");
			} else {
				i.end(testData.data);
			}
			i.on('error', function(err) { cb(err) });
			
			var o = fs.createWriteStream(testDir + '/result.tree');
			o.end(testData.document);
			o.on('error', function(err) { cb(err) });

			delete testData.document;
			delete testData.data;
			if (testData.errors && testData.errors.length == 0) delete testData.errors;

			if (Object.getOwnPropertyNames(testData).length > 0) {
				var info = fs.createWriteStream(testDir + '/info.json');
				info.end(JSON.stringify(testData));
				info.on('error', function(err) { cb(err) });
			}

			cb(null, testData)
		} catch(e) {
			cb(e);
		}
	})
}

var q = async.queue(function(data, callback) {
	writeTestData(data.testData, data.number, data.testName, function(err, td) {
		callback(err, td);
	});
}, 10);

function setupTestDir(cb) {
	var testDir = __dirname + '/../data/tree-construction/';
	fs.mkdir(testDir, function(err) {
		if(!err || err.code === 'EEXIST') {
			cb(null)
		} else {
			cb(err)
		}
	});
}

function doSplitting(cb) {

	for(var i in testList) {
		var testname = testList[i];

		if(testname.match(/\.js$/)) continue;

		if(fs.statSync(base+testname).isDirectory()) continue;

		var testData = readTestData(base+testname);

		for(var i in testData) {
			q.push({testData: testData[i], number: i, testName: testname}, function(err, td) {
				if(err) throw err;
				console.log('.');
			});
		}
	}
}

setupTestDir(function(err) {
	doSplitting();
})
