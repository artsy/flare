// Generated by CoffeeScript 1.6.3
var EventSource, Events, File, HTML, History, JSDOM, Screen, URL, WebSocket, XMLHttpRequest, createDocument, createWindow, jsdomDispatchElement, loadDocument;

createDocument = require("./document");

EventSource = require("eventsource");

History = require("./history");

JSDOM = require("jsdom");

WebSocket = require("ws");

URL = require("url");

XMLHttpRequest = require("./xhr");

Events = JSDOM.dom.level3.events;

HTML = JSDOM.dom.level3.html;

module.exports = createWindow = function(_arg) {
  var browser, closed, document, encoding, eventQueue, global, history, method, name, opener, params, parent, referer, url, window, windowHistory;
  browser = _arg.browser, params = _arg.params, encoding = _arg.encoding, history = _arg.history, method = _arg.method, name = _arg.name, opener = _arg.opener, parent = _arg.parent, referer = _arg.referer, url = _arg.url;
  name || (name = "");
  url || (url = "about:blank");
  window = JSDOM.createWindow(HTML);
  global = window.getGlobal();
  closed = false;
  Object.defineProperty(window, "browser", {
    value: browser,
    enumerable: true
  });
  document = createDocument(browser, window, referer || history.url);
  Object.defineProperty(window, "document", {
    value: document,
    enumerable: true
  });
  Object.defineProperty(window, "name", {
    value: name,
    enumerable: true
  });
  if (parent) {
    Object.defineProperty(window, "parent", {
      value: parent,
      enumerable: true
    });
    Object.defineProperty(window, "top", {
      value: parent.top,
      enumerable: true
    });
  } else {
    Object.defineProperty(window, "parent", {
      value: global,
      enumerable: true
    });
    Object.defineProperty(window, "top", {
      value: global,
      enumerable: true
    });
  }
  Object.defineProperty(window, "opener", {
    value: opener && opener,
    enumerable: true
  });
  Object.defineProperty(window, "title", {
    get: function() {
      return document.title;
    },
    set: function(title) {
      return document.title = title;
    },
    enumerable: true
  });
  Object.defineProperty(window, "console", {
    value: browser.console,
    enumerable: true
  });
  Object.defineProperties(window.navigator, {
    cookieEnabled: {
      value: true
    },
    javaEnabled: {
      value: function() {
        return false;
      }
    },
    plugins: {
      value: []
    },
    userAgent: {
      value: browser.userAgent
    },
    language: {
      value: browser.language
    },
    vendor: {
      value: "Zombie Industries"
    }
  });
  Object.defineProperty(window, "cookies", {
    get: function() {
      return browser.cookies(this.location.hostname, this.location.pathname);
    }
  });
  browser._storages.extend(window);
  browser._interact.extend(window);
  Object.defineProperties(window, {
    File: {
      value: File
    },
    Event: {
      value: Events.Event
    },
    screen: {
      value: new Screen()
    },
    MouseEvent: {
      value: Events.MouseEvent
    },
    MutationEvent: {
      value: Events.MutationEvent
    },
    UIEvent: {
      value: Events.UIEvent
    }
  });
  window.atob = function(string) {
    return new Buffer(string, "base64").toString("utf8");
  };
  window.btoa = function(string) {
    return new Buffer(string, "utf8").toString("base64");
  };
  window.XMLHttpRequest = function() {
    return new XMLHttpRequest(window);
  };
  window.EventSource = function(url) {
    url = HTML.resourceLoader.resolve(document, url);
    window.setInterval((function() {}), 100);
    return new EventSource(url);
  };
  window.WebSocket = function(url, protocol) {
    var origin;
    url = HTML.resourceLoader.resolve(document, url);
    origin = "" + window.location.protocol + "//" + window.location.host;
    return new WebSocket(url, {
      origin: origin,
      protocol: protocol
    });
  };
  window.Image = function(width, height) {
    var img;
    img = new HTML.HTMLImageElement(window.document);
    img.width = width;
    img.height = height;
    return img;
  };
  window.resizeTo = function(width, height) {
    window.outerWidth = window.innerWidth = width;
    return window.outerHeight = window.innerHeight = height;
  };
  window.resizeBy = function(width, height) {
    return window.resizeTo(window.outerWidth + width, window.outerHeight + height);
  };
  window.onhashchange = null;
  window.postMessage = function(data, targetOrigin) {
    var event, origin;
    document = window.document;
    event = document.createEvent("MessageEvent");
    event.initEvent("message", false, false);
    event.data = data;
    event.source = (browser._windowInScope || window).getGlobal();
    origin = event.source.location;
    event.origin = URL.format({
      protocol: origin.protocol,
      host: origin.host
    });
    return window.dispatchEvent(event);
  };
  window._evaluate = function(code, filename) {
    var error, originalInScope, result, _ref;
    if (!browser.runScripts) {
      return;
    }
    try {
      _ref = [browser._windowInScope, window], originalInScope = _ref[0], browser._windowInScope = _ref[1];
      if (typeof code === "string" || code instanceof String) {
        result = global.run(code, filename);
      } else if (code) {
        result = code.call(global);
      }
      browser.emit("evaluated", code, result, filename);
      return result;
    } catch (_error) {
      error = _error;
      error.filename || (error.filename = filename);
      return browser.emit("error", error);
    } finally {
      browser._windowInScope = originalInScope;
    }
  };
  window.onerror = function(event) {
    var error;
    error = event.error || new Error("Error loading script");
    return browser.emit("error", error);
  };
  eventQueue = browser.eventLoop.createEventQueue(window);
  Object.defineProperties(window, {
    _eventQueue: {
      value: eventQueue
    },
    setTimeout: {
      value: eventQueue.setTimeout.bind(eventQueue)
    },
    clearTimeout: {
      value: eventQueue.clearTimeout.bind(eventQueue)
    },
    setInterval: {
      value: eventQueue.setInterval.bind(eventQueue)
    },
    clearInterval: {
      value: eventQueue.clearInterval.bind(eventQueue)
    },
    setImmediate: {
      value: function(fn) {
        return eventQueue.setTimeout(fn, 0);
      }
    },
    clearImmediate: {
      value: eventQueue.clearTimeout.bind(eventQueue)
    }
  });
  window.open = function(url, name, features) {
    url = url && HTML.resourceLoader.resolve(document, url);
    return browser.tabs.open({
      name: name,
      url: url,
      opener: window
    });
  };
  Object.defineProperty(window, "closed", {
    get: function() {
      return closed;
    },
    enumerable: true
  });
  window._destroy = function() {
    var frame, _i, _len, _ref;
    if (closed) {
      return;
    }
    closed = true;
    _ref = window.frames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      frame = _ref[_i];
      frame.close();
    }
    eventQueue.destroy();
    document.close();
    window.dispose();
  };
  window.close = function() {
    if (parent || closed) {
      return;
    }
    if (browser._windowInScope === opener || browser._windowInScope === null) {
      browser.emit("closed", window);
      window._destroy();
      history.destroy();
    } else {
      browser.log("Scripts may not close windows that were not opened by script");
    }
  };
  history.updateLocation(window, url);
  windowHistory = {
    forward: history.go.bind(history, 1),
    back: history.go.bind(history, -1),
    go: history.go.bind(history),
    pushState: history.pushState.bind(history),
    replaceState: history.replaceState.bind(history),
    _submit: history.submit.bind(history),
    dump: history.dump.bind(history)
  };
  Object.defineProperties(windowHistory, {
    length: {
      get: function() {
        return history.length;
      },
      enumerable: true
    },
    state: {
      get: function() {
        return history.state;
      },
      enumerable: true
    }
  });
  Object.defineProperties(window, {
    history: {
      value: windowHistory
    }
  });
  browser.emit("opened", window);
  window._submit = function(_arg1) {
    var encoding, method, params, submitTo, target, url;
    url = _arg1.url, method = _arg1.method, encoding = _arg1.encoding, params = _arg1.params, target = _arg1.target;
    url = HTML.resourceLoader.resolve(document, url);
    target || (target = "_self");
    browser.emit("submit", url, target);
    switch (target) {
      case "_self":
        submitTo = window;
        break;
      case "_parent":
        submitTo = window.parent;
        break;
      case "_top":
        submitTo = window.top;
        break;
      default:
        submitTo = browser.tabs.open({
          name: target
        });
    }
    return submitTo.history._submit({
      url: url,
      method: method,
      encoding: encoding,
      params: params
    });
  };
  loadDocument({
    document: document,
    history: history,
    url: url,
    method: method,
    encoding: encoding,
    params: params
  });
  return window;
};

loadDocument = function(_arg) {
  var browser, document, done, encoding, error, headers, history, method, params, pathname, protocol, url, window, _ref;
  document = _arg.document, history = _arg.history, url = _arg.url, method = _arg.method, encoding = _arg.encoding, params = _arg.params;
  window = document.window;
  browser = window.browser;
  window._response = {};
  done = function(error) {
    if (error) {
      return browser.emit("error", error);
    } else {
      return browser.emit("loaded", document);
    }
  };
  method = (method || "GET").toUpperCase();
  if (method === "POST") {
    headers = {
      "content-type": encoding || "application/x-www-form-urlencoded"
    };
  }
  _ref = URL.parse(url), protocol = _ref.protocol, pathname = _ref.pathname;
  switch (protocol) {
    case "about:":
      document.open();
      document.write("<html><body></body></html>");
      document.close();
      return browser.emit("loaded", document);
    case "javascript:":
      try {
        window._evaluate(pathname, "javascript:");
        return browser.emit("loaded", document);
      } catch (_error) {
        error = _error;
        return browser.emit("error", error);
      }
      break;
    case "http:":
    case "https:":
    case "file:":
      headers = headers || {};
      if (!headers.referer) {
        headers.referer = document.referrer;
      }
      return window._eventQueue.http(method, url, {
        headers: headers,
        params: params,
        target: document
      }, function(error, response) {
        var body, contentLoaded, handleRefresh, windowLoaded;
        if (error) {
          document.open();
          document.write("<html><body>" + (error.message || error) + "</body></html>");
          document.close();
          browser.emit("error", error);
          return;
        }
        window._response = response;
        windowLoaded = function(event) {
          document.removeEventListener("load", windowLoaded);
          return window.dispatchEvent(event);
        };
        document.addEventListener("load", windowLoaded);
        handleRefresh = function() {
          var content, match, nothing, refresh, refreshTimeout, refreshURL, refresh_timeout, refresh_url;
          refresh = document.querySelector("meta[http-equiv='refresh']");
          if (refresh) {
            content = refresh.getAttribute("content");
            match = content.match(/^\s*(\d+)(?:\s*;\s*url\s*=\s*(.*?))?\s*(?:;|$)/i);
            if (match) {
              nothing = match[0], refresh_timeout = match[1], refresh_url = match[2];
            } else {
              return;
            }
            refreshTimeout = parseInt(refresh_timeout, 10);
            refreshURL = refresh_url || document.location.href;
            if (refreshTimeout >= 0) {
              return window._eventQueue.enqueue(function() {
                var newWindow;
                history.replace(refreshURL);
                newWindow = history.current.window;
                return newWindow.addEventListener("load", function() {
                  return newWindow._response.redirects++;
                });
              });
            }
          }
        };
        contentLoaded = function(event) {
          document.removeEventListener("DOMContentLoaded", contentLoaded);
          window.dispatchEvent(event);
          return handleRefresh();
        };
        document.addEventListener("DOMContentLoaded", contentLoaded);
        window.browser.emit("loading", document);
        if (response.body) {
          body = response.body.toString("utf8");
        }
        if (!/<html>/.test(body)) {
          body = "<html><body>" + (body || "") + "</body></html>";
        }
        history.updateLocation(window, response.url);
        document.open();
        document.write(body);
        document.close();
        if (response.statusCode >= 400) {
          return browser.emit("error", new Error("Server returned status code " + response.statusCode + " from " + url));
        } else if (document.documentElement) {
          return browser.emit("loaded", document);
        } else {
          return browser.emit("error", new Error("Could not parse document at " + url));
        }
      });
    default:
      return browser.emit("error", new Error("Cannot load resource " + url + ", unsupported protocol"));
  }
};

jsdomDispatchElement = HTML.Element.prototype.dispatchEvent;

HTML.Node.prototype.dispatchEvent = function(event) {
  var browser, document, error, originalInScope, self, window, _ref;
  self = this;
  document = self.ownerDocument || self.document || self;
  window = document.parentWindow;
  browser = window.browser;
  browser.emit("event", event, self);
  try {
    _ref = [browser._windowInScope, window], originalInScope = _ref[0], browser._windowInScope = _ref[1];
    window.event = event;
    return jsdomDispatchElement.call(self, event);
  } catch (_error) {
    error = _error;
    return browser.emit("error", error);
  } finally {
    delete window.event;
    browser._windowInScope = originalInScope;
  }
};

Screen = (function() {
  function Screen() {
    this.top = this.left = 0;
    this.width = 1280;
    this.height = 800;
  }

  Screen.prototype.__defineGetter__("availLeft", function() {
    return 0;
  });

  Screen.prototype.__defineGetter__("availTop", function() {
    return 0;
  });

  Screen.prototype.__defineGetter__("availWidth", function() {
    return 1280;
  });

  Screen.prototype.__defineGetter__("availHeight", function() {
    return 800;
  });

  Screen.prototype.__defineGetter__("colorDepth", function() {
    return 24;
  });

  Screen.prototype.__defineGetter__("pixelDepth", function() {
    return 24;
  });

  return Screen;

})();

File = (function() {
  function File() {}

  return File;

})();
