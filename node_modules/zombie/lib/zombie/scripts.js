// Generated by CoffeeScript 1.6.3
var CoffeeScript, HTML, URL, ex, raise;

HTML = require("jsdom").dom.level3.html;

URL = require("url");

try {
  CoffeeScript = require("coffee-script");
  HTML.languageProcessors.coffeescript = function(element, code, filename) {
    return this.javascript(element, CoffeeScript.compile(code), filename);
  };
} catch (_error) {
  ex = _error;
}

HTML.languageProcessors.javascript = function(element, code, filename) {
  var cast, document, error, window;
  if (code) {
    document = element.ownerDocument;
    window = document.window;
    try {
      return window._evaluate(code, filename);
    } catch (_error) {
      error = _error;
      if (!(error instanceof Error)) {
        cast = new Error(error.message);
        cast.stack = error.stack;
        error = cast;
      }
      return raise({
        element: element,
        location: filename,
        from: __filename,
        error: error
      });
    }
  }
};

HTML.HTMLScriptElement._init = function() {
  this.addEventListener("DOMNodeInsertedIntoDocument", function() {
    var executeInOrder, executeInlineScript, filename,
      _this = this;
    if (this.src) {
      return HTML.resourceLoader.load(this, this.src, this._eval);
    } else {
      if (this.id) {
        filename = "" + this.ownerDocument.URL + ":#" + id;
      } else {
        filename = "" + this.ownerDocument.URL + ":script";
      }
      executeInlineScript = function() {
        return _this._eval(_this.textContent, filename);
      };
      executeInOrder = HTML.resourceLoader.enqueue(this, executeInlineScript, filename);
      if (this.ownerDocument.readyState === "loading") {
        return process.nextTick(executeInOrder);
      } else {
        return executeInOrder();
      }
    }
  });
};

HTML.resourceLoader.load = function(element, href, callback) {
  var document, loaded, ownerImplementation, tagName, url, window;
  document = element.ownerDocument;
  window = document.parentWindow;
  ownerImplementation = document.implementation;
  tagName = element.tagName.toLowerCase();
  if (ownerImplementation.hasFeature("FetchExternalResources", tagName)) {
    loaded = function(response) {
      return callback.call(element, response.body.toString(), url.pathname);
    };
    url = HTML.resourceLoader.resolve(document, href);
    return window._eventQueue.http("GET", url, {
      target: element
    }, this.enqueue(element, loaded, url));
  }
};

module.exports = raise = function(_arg) {
  var document, element, error, line, location, message, partial, scope, window, _i, _len, _ref;
  element = _arg.element, location = _arg.location, scope = _arg.scope, error = _arg.error;
  document = element.ownerDocument || element;
  window = document.parentWindow;
  message = scope ? "" + scope + ": " + error.message : error.message;
  location || (location = document.location.href);
  partial = [];
  if (error.stack) {
    _ref = error.stack.split("\n");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (~line.indexOf("contextify/lib/contextify.js")) {
        break;
      }
      partial.push(line);
    }
  }
  partial.push("    in " + location);
  error.stack = partial.join("\n");
  window._eventQueue.onerror(error);
};
