{
  "name": "strong-license",
  "version": "1.0.0",
  "description": "Simple license generator/validator using JWT.",
  "main": "index.js",
  "dependencies": {
    "jwt-simple": "^0.2.0"
  },
  "devDependencies": {
    "tapsert": "0.0.1"
  },
  "scripts": {
    "test": "node test.js --tap"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/strong-license.git"
  },
  "author": {
    "name": "Ryan Graham",
    "email": "ryan@strongloop.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/strongloop/strong-license/issues"
  },
  "homepage": "https://github.com/strongloop/strong-license",
  "readme": "strong-license\n==============\n\nSimple license generator/validator using JWT with the pre-defined claim names\n(fields) and validation semantics.\n\n * `product` - a string identifying the product the license applies to\n * `features` - an array of strings identifying features of the product\n * `activationDate` - a Date indicating when the license period starts\n * `expirationDate` - a Date indicating when the license period ends\n * `email` - a string identifing who the license is for (primarily used for\n   logging and identification for support purposes)\n\nBoth the `product` and `features` fields support `*` as a wildcard to indicate\nthat all products or features are covered by the license. When the product\nfield is a wildcard, any product check matches but it does not imply that all\nfeatures are covered. When the features list contains a wildcard as one of its\nentries, any feature check matches.\n\n## Usage\n\nThe strong-license module defines the License class, which can be used for\ngenerating, parsing, and validating a license key.\n\n### Generating a License Key\n\n```js\nvar License = require('strong-license');\nvar details = {\n  email: 'user@example.com',\n  product: 'enterprise-node',\n  features: ['foo', 'bar', 'baz'],\n  activationDate: new Date(),\n  expirationDate: new Date(Date.now() + 1000*60*60*24*365),\n};\nvar lic = new License(details, 'super secret key!');\n\nprocess.env.LICENSE_KEY = lic.key;\n```\n\nIt is also possible to generate a null license, which does not cover any\nproducts or features and is perpetually expired. It does, however, cover the\nnull query scenario.\n\n```js\nvar License = require('strong-license');\nvar nullLicense = new License();\n\nnullLicense.covers(); // => true! Can't do anything, but can do nothing!\n```\n\n### Parsing/Validating a License Key\n\nIf a license coverage query omits a field, that field is considered a match.\n\n```js\nvar License = require('strong-license');\nvar now = new Date();\nvar yesterday = new Date(Date.now() - 1000*60*60*24);\nvar lic = new License(process.env.LICENSE_KEY, 'super secret key!');\n\nlic.covers('enterprise-node', 'foo', now); // => true\nlic.covers('myProduct', 'featurex', now); // => false\n```\n\nIf a parameter is omitted, is considered a match.\n\n```js\nlic.covers('enterprise-node', 'bar', null); // => true\nlic.covers('enterprise-node', null, now); // => true\nlic.cocers(null, 'baz', yesterday); // => false\nlic.covers(); // => true! any license covers \"nothing\"\n```\n",
  "readmeFilename": "README.md",
  "_id": "strong-license@1.0.0",
  "_from": "strong-license@~1.0.0"
}
