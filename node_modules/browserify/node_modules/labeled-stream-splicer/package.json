{
  "name": "labeled-stream-splicer",
  "version": "1.0.0",
  "description": "stream splicer with labels",
  "main": "index.js",
  "dependencies": {
    "inherits": "^2.0.1",
    "isarray": "~0.0.1",
    "stream-splicer": "^1.1.0"
  },
  "devDependencies": {
    "tape": "^2.12.1",
    "browser-pack": "^2.0.1",
    "concat-stream": "^1.4.6",
    "module-deps": "^2.1.2",
    "through2": "^1.0.0"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/labeled-stream-splicer.git"
  },
  "homepage": "https://github.com/substack/labeled-stream-splicer",
  "keywords": [
    "splice",
    "stream",
    "labels",
    "mutable",
    "pipeline"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/15",
      "firefox/latest",
      "firefox/nightly",
      "chrome/15",
      "chrome/latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# labeled-stream-splicer\n\n[stream splicer](https://npmjs.org/package/stream-splicer) with labels\n\n[![testling badge](https://ci.testling.com/substack/labeled-stream-splicer.png)](https://ci.testling.com/substack/labeled-stream-splicer)\n\n[![build status](https://secure.travis-ci.org/substack/labeled-stream-splicer.png)](http://travis-ci.org/substack/labeled-stream-splicer)\n\n# example\n\nHere's an example that exposes a label for `deps` and `pack`:\n\n``` js\nvar splicer = require('labeled-stream-splicer');\nvar through = require('through2');\nvar deps = require('module-deps');\nvar pack = require('browser-pack');\n\nvar pipeline = splicer.obj([\n    'deps', [ deps(__dirname + '/browser/main.js') ],\n    'pack', [ pack({ raw: true }) ],\n    process.stdout\n]);\n\npipeline.get('deps').push(through.obj(function (row, enc, next) {\n    row.source = row.source.toUpperCase();\n    this.push(row);\n    next();\n}));\n```\n\nHere the `deps` sub-pipeline is augmented with a post-transformation that\nuppercases its source input.\n\n# methods\n\n``` js\nvar splicer = require('labeled-stream-splicer')\n```\n\nThe API is the same as\n[stream-splicer](https://npmjs.org/package/stream-splicer),\nexcept that `pipeline.get()`, `pipeline.splice()`, and `pipeline.indexOf()` can\naccept string labels in addition to numeric indexes.\n\n## var pipeline = splicer(streams, opts)\n\nCreate a `pipeline` duplex stream given an array of `streams`. Each `stream`\nwill be piped to the next. Writes to `pipeline` get written to the first stream\nand data for reads from `pipeline` come from the last stream.\n\nTo signify a label, a stream may have a `.label` property or a string may be\nplaced in the `streams` array.\n\nFor example, for streams `[ a, 'foo', b, c, 'bar', d ]`, this pipeline is\nconstructed internally:\n\n```\na.pipe(b).pipe(c).pipe(d)\n```\n\nwith a label `'foo`' that points to `b` and a label `'bar'` that points to `d`.\nIf `a` or `c` has a `.label` property, that label would be used for addressing.\n\nInput will get written into `a`. Output will be read from `d`.\n\nIf any of the elements in `streams` are arrays, they will be converted into\nnested labeled pipelines. This is useful if you want to expose a hookable\npipeline with grouped insertion points.\n\n## var pipeline = splicer.obj(streams, opts)\n\nCreate a `pipeline` with `opts.objectMode` set to true for convenience.\n\n## var removed = pipeline.splice(index, howMany, stream, ...)\n\nSplice the pipeline starting at `index`, removing `howMany` streams and\nreplacing them with each additional `stream` argument provided.\n\nThe streams that were removed from the splice and returned.\n\n`index` can be an integer index or a label.\n\n## pipeline.push(stream, ...)\n\nPush one or more streams to the end of the pipeline.\n\nThe stream arguments may have a `label` property that will be used for string\nlookups.\n\n## var stream = pipeline.pop()\n\nPop a stream from the end of the pipeline.\n\n## pipeline.unshift(stream, ...)\n\nUnshift one or more streams to the begining of the pipeline.\n\nThe stream arguments may have a `label` property that will be used for string\nlookups.\n\n## var stream = pipeline.shift()\n\nShift a stream from the begining of the pipeline.\n\n## var stream = pipeline.get(index)\n\nReturn the stream at index `index`.\n\n`index` can be an integer or a string label.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install labeled-stream-splicer\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/labeled-stream-splicer/issues"
  },
  "_id": "labeled-stream-splicer@1.0.0",
  "_from": "labeled-stream-splicer@^1.0.0"
}
