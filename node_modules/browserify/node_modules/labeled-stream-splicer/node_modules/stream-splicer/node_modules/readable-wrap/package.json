{
  "name": "readable-wrap",
  "version": "1.0.0",
  "description": "upgrade streams1 to streams2 streams as a standalone module",
  "main": "index.js",
  "dependencies": {
    "readable-stream": "^1.1.13-1"
  },
  "devDependencies": {
    "tape": "~2.12.1",
    "through2": "~1.0.0"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/readable-wrap.git"
  },
  "homepage": "https://github.com/substack/readable-wrap",
  "keywords": [
    "streams1",
    "streams2",
    "readable-stream",
    "streams",
    "wrapper"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/15",
      "firefox/latest",
      "firefox/nightly",
      "chrome/15",
      "chrome/latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# readable-wrap\n\nupgrade streams1 to streams2 streams as a standalone module\n\nThis module provides a wrap function based on `Readable().wrap()` from node core\nbut as a standalone module.\n\nUse this module if you don't want to wait for\n[a patch in node core](https://github.com/joyent/node/pull/7758)\nto land that fixes falsey objectMode values in wrapped readable streams.\n\n[![build status](https://secure.travis-ci.org/substack/readable-wrap.png)](http://travis-ci.org/substack/readable-wrap)\n\n[![testling badge](https://ci.testling.com/substack/readable-wrap.png)](https://ci.testling.com/substack/readable-wrap)\n\n# example\n\n``` js\nvar split = require('split');\nvar wrap = require('readable-wrap');\nvar through = require('through2');\n\nprocess.stdin.pipe(wrap.obj(split())).pipe(through.obj(write));\n\nfunction write (buf, enc, next) {\n    console.log(buf.length + ': ' + buf);\n    next();\n}\n```\n\noutput:\n\n```\n$ echo -e 'one\\ntwo\\n\\nthree' | node example/split.js \n3: one\n3: two\n0: \n5: three\n0: \n```\n\nIn object mode you get the empty lines, which is handy if you need to perform a\nspecial action on empty lines such as to partition an HTTP request header from a\nbody in a streaming fashion.\n\nIn non-object mode the empty lines get ignored because that is how node core\nstreams work.\n\n# methods\n\n``` js\nvar wrap = require('readable-wrap')\n```\n\n## var stream = wrap(oldStream, opts)\n\nReturn a new streams2 `stream` based on the streams1 stream `oldStream`.\n\nThe `opts` will be passed to the underlying readable stream instance.\n\n## var stream = wrap.obj(oldStream, opts)\n\nReturn a new streams2 `stream` based on the streams1 stream `oldStream` with\n`opts.objectMode` set to `true`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install readable-wrap\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/readable-wrap/issues"
  },
  "_id": "readable-wrap@1.0.0",
  "_from": "readable-wrap@^1.0.0"
}
