{
  "name": "benv",
  "version": "0.1.6",
  "description": "Stub a browser environment and test your client-side code in node.js.",
  "keywords": [
    "browser",
    "tests",
    "benv",
    "stub",
    "jsdom"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/artsy/benv.git"
  },
  "author": {
    "name": "Craig Spaeth",
    "email": "craigspaeth@gmail.com",
    "url": "http://craigspaeth.com"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "jsdom": "*",
    "rewire": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "jade": "*"
  },
  "readme": "# benv\n\nStub a browser environment and test your client-side code in node.js.\n\n## Example\n\nExample using [mocha](http://visionmedia.github.io/mocha/) and [should](https://github.com/visionmedia/should.js/).\n\nGiven some client-side code\n\n**./client/app.js**\n````javascript\n$(function() {\n  $('body').html('Wat!?');\n});\n````\n\nSetup, declare global dependencies, and test in node.js.\n\n**./test/client/app.js**\n````javascript\nvar benv = require('benv');\n\nbeforeEach(function(done) {\n  benv.setup(function() {\n    benv.expose({\n      $: benv.require('../client/vendor/zepto.js', 'Zepto')\n    });\n    done();\n  });\n});\n\nafterEach(function(done) {\n  benv.teardown();\n});\n\ndescribe('app.js', function() {\n  it('renders Wat', function() {\n    require('../client/app.js');\n    $('body').html().should.include('Wat!?');\n  });\n});\n\n````\n\n## Why\n\nUnit testing client side code in a browser is slow and hard to setup with [CI](http://en.wikipedia.org/wiki/Continuous_integration). Wouldn't it be nice if we could just run it along-side our server-side tests? Benv is a library of test helpers that make it easy to require your client-side code in node.js and test it like any other node module.\n\nSee [this blog post](http://artsy.github.io/blog/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/) for details & inspiration.\n\n## API\n\n### benv.setup(callback)\n\nExposes a stubbed browser API into the node.js global namespace so the current process can act like a browser environment.\n\n### benv.expose(globals)\n\nPass in a hash of common global client-side dependencies. For instance you may have a [Backbone](https://github.com/jashkenas/backbone) app that has a global `App` namespace and uses jQuery. This should be run after `benv.setup` b/c a lot of libraries assume the `window` object is already global.\n\n````javascript\nbenv.expose({\n  _: require('underscore'),\n  jQuery: require('jquery'),\n  $: require('jquery'),\n  Backbone: require('backbone'),\n  App: {}\n})\n```\n\n### benv.teardown(clearDOM = true)\n\nClean up the globals exposed by `setup` and `expose` so other tests can run without being harmed.\n\nUse `benv.teardown(false)` to keep around references to `window`, `document`, and other DOM globals. Useful for libraries that cache references to DOM globals and don't work so nicely when trying to clear globals and re-require these libs.\n\n### benv.require(filename, globalVarName)\n\nFor non-commonjs wrapped libraries, benv.require will export the global variable that is generally attached to window. For instance [zepto](https://github.com/madrobby/zepto) doesn't adopt any module pattern but it does create a global `Zepto` variable.\n\ne.g.\n\n````javascript\nvar $ = benv.require('./client/vendor/zepto.js', 'Zepto');\n````\n\n### benv.render(filename, data, callback)\n\nRenders the html in a body tag of a template. Pass in the template's filename along with any data passed into the template. Benv is backed by jsdom and `benv.render` will remove any script tags so as to not accidentally run external javascript.\n\ne.g.\n\n````javascript\nbenv.render('./views/artwork.jade', {\n  artwork: new Artwork({ title: 'Andy Warhol, Flowers' })\n}, function() {\n  $('body').html().should.include('Andy Warhol, Flowers');\n});\n````\n\nCurrently only supports [.jade](https://github.com/visionmedia/jade) templates, but please contribute others :)\n\n### benv.requireWithJadeify(filename, varNames)\n\nFor those using [jadeify](https://github.com/OliverJAsh/node-jadeify2) when requiring client-side code that uses jadeify it will throw an error because `require('template.jade')` isn't valid node code.\n\nIf you defer your jade requires to run time e.g. `var artworkTemplate = function() { require('foo.jade').apply(this, arguments); }` and use `benv.requireWithJadeify('../client/artwork.js', ['artworkTemplate'])` you can avoid this error and test the jadeified templates in node again.\n\n## Contributing\n\nPlease fork the project and submit a pull request with tests. Install node modules `npm install` and run tests with `make test`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/artsy/benv/issues"
  },
  "homepage": "https://github.com/artsy/benv",
  "_id": "benv@0.1.6",
  "_from": "benv@*"
}
